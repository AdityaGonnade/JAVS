{"ast":null,"code":"var _class;\nimport { Validators } from '@angular/forms';\nimport { ResetPassword } from 'src/app/models/reset-password.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nfunction ResetComponent_small_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 16);\n    i0.ɵɵtext(1, \"*Password is required*\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetComponent_small_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 16);\n    i0.ɵɵtext(1, \"*ConfirmPassword is required*\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetComponent_small_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 16);\n    i0.ɵɵtext(1, \"*Password didn't matched*\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class ResetComponent {\n  constructor(fb) {\n    this.fb = fb;\n    this.reserPasswordObj = new ResetPassword();\n  }\n  ngOnInit() {\n    this.resetPasswordForm = this.fb.group({\n      password: [null, Validators.required],\n      confirmPassword: []\n    });\n  }\n}\n_class = ResetComponent;\n_class.ɵfac = function ResetComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-reset\"]],\n  decls: 23,\n  vars: 8,\n  consts: [[1, \"outer\"], [1, \"container\"], [1, \"row\"], [1, \"offset-md-2\", \"col-lg-5\", \"col-md-7\", \"offset-lg-4\", \"offset-md-3\"], [1, \"panel\", \"border\", \"bg-white\"], [1, \"panel-heading\"], [1, \"pt-3\", \"font-weight-bold\"], [1, \"panel-body\", \"p-3\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\", \"pt-3\"], [1, \"input-field\"], [1, \"fa\", \"fa-lock\", \"px-2\"], [\"type\", \"password\", \"placeholder\", \"New Password\", \"formControlName\", \"password\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"type\", \"password\", \"placeholder\", \"Confirm Password \", \"formControlName\", \"confirmPassword\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"btn-block\", \"mt-4\", \"w-100\"], [1, \"text-danger\"]],\n  template: function ResetComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 5)(6, \"h3\", 6);\n      i0.ɵɵtext(7, \"Reset Password\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"div\", 7)(9, \"form\", 8);\n      i0.ɵɵlistener(\"ngSubmit\", function ResetComponent_Template_form_ngSubmit_9_listener() {\n        return ctx.reset();\n      });\n      i0.ɵɵelementStart(10, \"div\", 9)(11, \"div\", 10);\n      i0.ɵɵelement(12, \"span\", 11)(13, \"input\", 12);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(14, ResetComponent_small_14_Template, 2, 0, \"small\", 13);\n      i0.ɵɵelementStart(15, \"div\", 9)(16, \"div\", 10);\n      i0.ɵɵelement(17, \"span\", 11)(18, \"input\", 14);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(19, ResetComponent_small_19_Template, 2, 0, \"small\", 13);\n      i0.ɵɵtemplate(20, ResetComponent_small_20_Template, 2, 0, \"small\", 13);\n      i0.ɵɵelementStart(21, \"button\", 15);\n      i0.ɵɵtext(22, \"Reset\");\n      i0.ɵɵelementEnd()()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"formGroup\", ctx.resetPasswordForm);\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassProp(\"error\", ctx.resetPasswordForm.controls[\"password\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"password\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.resetPasswordForm.controls[\"password\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"password\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassProp(\"error\", ctx.resetPasswordForm.controls[\"confirmPassword\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"confirmPassword\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.resetPasswordForm.controls[\"confirmPassword\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"confirmPassword\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.resetPasswordForm.hasError(\"confirmPasswordValidator\", \"confirmPassword\"));\n    }\n  },\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["Validators","ResetPassword","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ResetComponent","constructor","fb","reserPasswordObj","ngOnInit","resetPasswordForm","group","password","required","confirmPassword","ɵɵdirectiveInject","i1","FormBuilder","selectors","decls","vars","consts","template","ResetComponent_Template","rf","ctx","ɵɵlistener","ResetComponent_Template_form_ngSubmit_9_listener","reset","ɵɵelement","ɵɵtemplate","ResetComponent_small_14_Template","ResetComponent_small_19_Template","ResetComponent_small_20_Template","ɵɵadvance","ɵɵproperty","ɵɵclassProp","controls","dirty","hasError"],"sources":["/Users/aditya.gonnade/Documents/GitHub/JAVS/Frontend/src/app/components/reset/reset.component.ts","/Users/aditya.gonnade/Documents/GitHub/JAVS/Frontend/src/app/components/reset/reset.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ResetPassword } from 'src/app/models/reset-password.model';\n\n@Component({\n  selector: 'app-reset',\n  templateUrl: './reset.component.html',\n  styleUrls: ['./reset.component.css']\n})\nexport class ResetComponent implements OnInit {\n    resetPasswordForm!: FormGroup;\n    emailToReset!: string;\n    emailToken!: string;\n    reserPasswordObj = new ResetPassword();\n\n    constructor(private fb: FormBuilder) {\n      \n    }\n\n    ngOnInit(): void {\n      this.resetPasswordForm = this.fb.group({\n        password: [null, Validators.required],\n        confirmPassword:[]\n      })\n    }\n}\n","<div class=\"outer\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"offset-md-2 col-lg-5 col-md-7 offset-lg-4 offset-md-3\">\n                <div class=\"panel border bg-white\">\n                    <div class=\"panel-heading\">\n                        <h3 class=\"pt-3 font-weight-bold\">Reset Password</h3>\n                    </div>\n                    <div class=\"panel-body p-3\">\n                        <form [formGroup]=\"resetPasswordForm\" (ngSubmit)=\"reset()\">\n                            <div class=\"form-group pt-3\">\n                                <div class=\"input-field\" [class.error]=\"resetPasswordForm.controls['password'].dirty && resetPasswordForm.hasError('required','password')\"> <span class=\"fa fa-lock px-2\"></span> <input type=\"password\" placeholder=\"New Password\" formControlName=\"password\">\n                                </div>\n                            </div>\n                            <small *ngIf=\"resetPasswordForm.controls['password'].dirty && resetPasswordForm.hasError('required','password')\" class=\"text-danger\">*Password is required*</small>\n                            <div class=\"form-group pt-3\">\n                                <div class=\"input-field\" [class.error]=\"resetPasswordForm.controls['confirmPassword'].dirty && resetPasswordForm.hasError('required','confirmPassword')\"> <span class=\"fa fa-lock px-2\"></span> <input type=\"password\" placeholder=\"Confirm Password \" formControlName=\"confirmPassword\">\n                                </div>\n                            </div>\n                            <small *ngIf=\"resetPasswordForm.controls['confirmPassword'].dirty && resetPasswordForm.hasError('required','confirmPassword')\" class=\"text-danger\">*ConfirmPassword is required*</small>\n                            <small *ngIf=\"resetPasswordForm.hasError('confirmPasswordValidator','confirmPassword')\" class=\"text-danger\">*Password didn't matched*</small>\n\n                            <button type=\"submit\" class=\"btn btn-primary btn-block mt-4 w-100\">Reset</button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}