{"ast":null,"code":"var _class;\nimport { Validators } from '@angular/forms';\nimport { ResetPassword } from 'src/app/models/reset-password.model';\nimport { ConfirmPasswordValidator } from 'src/app/helpers/confirm-password.validator';\nimport ValidateForm from 'src/app/helpers/validateform';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/services/reset-password.service\";\nimport * as i4 from \"ng-angular-popup\";\nimport * as i5 from \"@angular/common\";\nfunction ResetComponent_small_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 16);\n    i0.ɵɵtext(1, \"*Password is required*\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetComponent_small_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 16);\n    i0.ɵɵtext(1, \"*ConfirmPassword is required*\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetComponent_small_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 16);\n    i0.ɵɵtext(1, \"*Password didn't matched*\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class ResetComponent {\n  constructor(fb, activatedRoute, resetService, toast, router) {\n    this.fb = fb;\n    this.activatedRoute = activatedRoute;\n    this.resetService = resetService;\n    this.toast = toast;\n    this.router = router;\n    this.reserPasswordObj = new ResetPassword();\n  }\n  ngOnInit() {\n    this.resetPasswordForm = this.fb.group({\n      password: [null, Validators.required],\n      confirmPassword: [null, Validators.required]\n    }, {\n      validator: ConfirmPasswordValidator(\"password\", \"confirmPassword\")\n    });\n    this.activatedRoute.queryParams.subscribe(val => {\n      this.emailToReset = val['email'];\n      let uriToken = val['code'];\n      this.emailToken = uriToken.replace(/ /g, '+');\n    });\n  }\n  reset() {\n    if (this.resetPasswordForm.valid) {\n      this.reserPasswordObj.email = this.emailToReset;\n      this.reserPasswordObj.newPassword = this.resetPasswordForm.value.password;\n      this.reserPasswordObj.confirmPassword = this.resetPasswordForm.value.confirmPassword;\n      this.reserPasswordObj.emailToken = this.emailToken;\n      this.resetService.resetPassword(this.reserPasswordObj).subscribe({\n        next: res => {\n          this.toast.success({\n            detail: 'Success',\n            summary: \"Password Reset Successfully\",\n            duration: 3000\n          });\n          this.router.navigate;\n        },\n        error: err => {}\n      });\n    } else {\n      ValidateForm.validateAllFormFields(this.resetPasswordForm);\n    }\n  }\n}\n_class = ResetComponent;\n_class.ɵfac = function ResetComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.ResetPasswordService), i0.ɵɵdirectiveInject(i4.NgToastService), i0.ɵɵdirectiveInject(i2.Router));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-reset\"]],\n  decls: 23,\n  vars: 8,\n  consts: [[1, \"outer\"], [1, \"container\"], [1, \"row\"], [1, \"offset-md-2\", \"col-lg-5\", \"col-md-7\", \"offset-lg-4\", \"offset-md-3\"], [1, \"panel\", \"border\", \"bg-white\"], [1, \"panel-heading\"], [1, \"pt-3\", \"font-weight-bold\"], [1, \"panel-body\", \"p-3\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\", \"pt-3\"], [1, \"input-field\"], [1, \"fa\", \"fa-lock\", \"px-2\"], [\"type\", \"password\", \"placeholder\", \"New Password\", \"formControlName\", \"password\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"type\", \"password\", \"placeholder\", \"Confirm Password \", \"formControlName\", \"confirmPassword\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"btn-block\", \"mt-4\", \"w-100\"], [1, \"text-danger\"]],\n  template: function ResetComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 5)(6, \"h3\", 6);\n      i0.ɵɵtext(7, \"Reset Password\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"div\", 7)(9, \"form\", 8);\n      i0.ɵɵlistener(\"ngSubmit\", function ResetComponent_Template_form_ngSubmit_9_listener() {\n        return ctx.reset();\n      });\n      i0.ɵɵelementStart(10, \"div\", 9)(11, \"div\", 10);\n      i0.ɵɵelement(12, \"span\", 11)(13, \"input\", 12);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(14, ResetComponent_small_14_Template, 2, 0, \"small\", 13);\n      i0.ɵɵelementStart(15, \"div\", 9)(16, \"div\", 10);\n      i0.ɵɵelement(17, \"span\", 11)(18, \"input\", 14);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(19, ResetComponent_small_19_Template, 2, 0, \"small\", 13);\n      i0.ɵɵtemplate(20, ResetComponent_small_20_Template, 2, 0, \"small\", 13);\n      i0.ɵɵelementStart(21, \"button\", 15);\n      i0.ɵɵtext(22, \"Reset\");\n      i0.ɵɵelementEnd()()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"formGroup\", ctx.resetPasswordForm);\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassProp(\"error\", ctx.resetPasswordForm.controls[\"password\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"password\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.resetPasswordForm.controls[\"password\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"password\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassProp(\"error\", ctx.resetPasswordForm.controls[\"confirmPassword\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"confirmPassword\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.resetPasswordForm.controls[\"confirmPassword\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"confirmPassword\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.resetPasswordForm.hasError(\"confirmPasswordValidator\", \"confirmPassword\"));\n    }\n  },\n  dependencies: [i5.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["Validators","ResetPassword","ConfirmPasswordValidator","ValidateForm","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ResetComponent","constructor","fb","activatedRoute","resetService","toast","router","reserPasswordObj","ngOnInit","resetPasswordForm","group","password","required","confirmPassword","validator","queryParams","subscribe","val","emailToReset","uriToken","emailToken","replace","reset","valid","email","newPassword","value","resetPassword","next","res","success","detail","summary","duration","navigate","error","err","validateAllFormFields","ɵɵdirectiveInject","i1","FormBuilder","i2","ActivatedRoute","i3","ResetPasswordService","i4","NgToastService","Router","selectors","decls","vars","consts","template","ResetComponent_Template","rf","ctx","ɵɵlistener","ResetComponent_Template_form_ngSubmit_9_listener","ɵɵelement","ɵɵtemplate","ResetComponent_small_14_Template","ResetComponent_small_19_Template","ResetComponent_small_20_Template","ɵɵadvance","ɵɵproperty","ɵɵclassProp","controls","dirty","hasError"],"sources":["/Users/aditya.gonnade/Documents/GitHub/JAVS/Frontend/src/app/components/reset/reset.component.ts","/Users/aditya.gonnade/Documents/GitHub/JAVS/Frontend/src/app/components/reset/reset.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ResetPassword } from 'src/app/models/reset-password.model';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ConfirmPasswordValidator } from 'src/app/helpers/confirm-password.validator';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport ValidateForm from 'src/app/helpers/validateform';\nimport { ResetPasswordService } from 'src/app/services/reset-password.service';\nimport { NgToastService } from 'ng-angular-popup';\n\n@Component({\n  selector: 'app-reset',\n  templateUrl: './reset.component.html',\n  styleUrls: ['./reset.component.css']\n})\nexport class ResetComponent implements OnInit {\n    resetPasswordForm!: FormGroup;\n    emailToReset!: string;\n    emailToken!: string;\n    reserPasswordObj = new ResetPassword();\n\n    constructor(private fb: FormBuilder,\n      private activatedRoute : ActivatedRoute,\n      private resetService: ResetPasswordService,\n      private toast : NgToastService,\n      private router: Router\n      ) {\n      \n    }\n\n    ngOnInit(): void {\n      this.resetPasswordForm = this.fb.group({\n        password: [null, Validators.required],\n        confirmPassword:[null,Validators.required]\n      },{\n        validator: ConfirmPasswordValidator(\"password\",\"confirmPassword\")\n      });\n\n      this.activatedRoute.queryParams.subscribe(val =>{\n        this.emailToReset = val['email'];\n        let uriToken = val['code'];\n        this.emailToken = uriToken.replace(/ /g,'+');\n      })\n    }\n\n    reset(){\n      if(this.resetPasswordForm.valid){\n        this.reserPasswordObj.email = this.emailToReset;\n        this.reserPasswordObj.newPassword = this.resetPasswordForm.value.password;\n        this.reserPasswordObj.confirmPassword = this.resetPasswordForm.value.confirmPassword;\n        this.reserPasswordObj.emailToken = this.emailToken;\n        this.resetService.resetPassword(this.reserPasswordObj)\n        .subscribe({\n          next:(res)=>{\n            this.toast.success({\n              detail: 'Success',\n              summary: \"Password Reset Successfully\",\n              duration: 3000,\n            });\n            this.router.navigate\n          },\n          error:(err)=>{\n\n          }\n        })\n\n      }\n      else{\n        ValidateForm.validateAllFormFields(this.resetPasswordForm);\n      }\n    }\n}\n","<div class=\"outer\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"offset-md-2 col-lg-5 col-md-7 offset-lg-4 offset-md-3\">\n                <div class=\"panel border bg-white\">\n                    <div class=\"panel-heading\">\n                        <h3 class=\"pt-3 font-weight-bold\">Reset Password</h3>\n                    </div>\n                    <div class=\"panel-body p-3\">\n                        <form  [formGroup]=\"resetPasswordForm\" (ngSubmit)=\"reset()\">\n                            <div class=\"form-group pt-3\">\n                                <div class=\"input-field\" [class.error]=\"resetPasswordForm.controls['password'].dirty && resetPasswordForm.hasError('required','password')\"> <span class=\"fa fa-lock px-2\"></span> <input type=\"password\" placeholder=\"New Password\" formControlName=\"password\">\n                                </div>\n                            </div>\n                            <small *ngIf=\"resetPasswordForm.controls['password'].dirty && resetPasswordForm.hasError('required','password')\" class=\"text-danger\">*Password is required*</small>\n                            <div class=\"form-group pt-3\">\n                                <div class=\"input-field\" [class.error]=\"resetPasswordForm.controls['confirmPassword'].dirty && resetPasswordForm.hasError('required','confirmPassword')\"> <span class=\"fa fa-lock px-2\"></span> <input type=\"password\" placeholder=\"Confirm Password \" formControlName=\"confirmPassword\">\n                                </div>\n                            </div>\n                            <small *ngIf=\"resetPasswordForm.controls['confirmPassword'].dirty && resetPasswordForm.hasError('required','confirmPassword')\" class=\"text-danger\">*ConfirmPassword is required*</small>\n                            <small *ngIf=\"resetPasswordForm.hasError('confirmPasswordValidator','confirmPassword')\" class=\"text-danger\">*Password didn't matched*</small>\n\n                            <button type=\"submit\" class=\"btn btn-primary btn-block mt-4 w-100\">Reset</button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}