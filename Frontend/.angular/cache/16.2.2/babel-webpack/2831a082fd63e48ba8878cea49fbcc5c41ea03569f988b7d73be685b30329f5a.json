{"ast":null,"code":"var _class;\nimport { inject } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ng-angular-popup\";\nclass AdminGuard {\n  /**\n   *\n   */\n  constructor(auth, route, toast) {\n    this.auth = auth;\n    this.route = route;\n    this.toast = toast;\n  }\n  canActivate() {\n    if (this.auth.isLoggedIn()) {\n      // this.route.navigate\n      return true;\n    } else {\n      this.toast.error({\n        detail: \"ERROR\",\n        summary: \"Please Login First!\"\n      });\n      this.route.navigate(['login']);\n      return false;\n    }\n  }\n}\n_class = AdminGuard;\n_class.ɵfac = function AdminGuard_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.NgToastService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport const authGuard = (route, state) => {\n  return inject(AdminGuard).canActivate();\n};","map":{"version":3,"names":["inject","AdminGuard","constructor","auth","route","toast","canActivate","isLoggedIn","error","detail","summary","navigate","i0","ɵɵinject","i1","AuthService","i2","Router","i3","NgToastService","factory","ɵfac","providedIn","authGuard","state"],"sources":["/Users/aditya.gonnade/Documents/GitHub/JAVS/Frontend/src/app/guards/auth.guard.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { CanActivateFn, Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { NgToastService } from 'ng-angular-popup';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nclass AdminGuard {\n  /**\n   *\n   */\n  constructor(private auth : AuthService, private route : Router, private toast : NgToastService) {\n    \n  }\n  canActivate(): boolean{\n    if(this.auth.isLoggedIn()){\n      // this.route.navigate\n      return true;\n    }\n    else{\n      this.toast.error({detail:\"ERROR\", summary:\"Please Login First!\"});\n      this.route.navigate(['login']);\n      return false;\n    }\n  }\n}\n\nexport const authGuard: CanActivateFn = (route, state): boolean => {\n  return inject(AdminGuard).canActivate();\n};\n\n\n"],"mappings":";AAAA,SAAqBA,MAAM,QAAQ,eAAe;;;;;AAKlD,MAIMC,UAAU;EACd;;;EAGAC,YAAoBC,IAAkB,EAAUC,KAAc,EAAUC,KAAsB;IAA1E,KAAAF,IAAI,GAAJA,IAAI;IAAwB,KAAAC,KAAK,GAALA,KAAK;IAAmB,KAAAC,KAAK,GAALA,KAAK;EAE7E;EACAC,WAAWA,CAAA;IACT,IAAG,IAAI,CAACH,IAAI,CAACI,UAAU,EAAE,EAAC;MACxB;MACA,OAAO,IAAI;KACZ,MACG;MACF,IAAI,CAACF,KAAK,CAACG,KAAK,CAAC;QAACC,MAAM,EAAC,OAAO;QAAEC,OAAO,EAAC;MAAqB,CAAC,CAAC;MACjE,IAAI,CAACN,KAAK,CAACO,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MAC9B,OAAO,KAAK;;EAEhB;;SAjBIV,UAAU;;mBAAVA,MAAU,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,cAAA;AAAA;;SAAVlB,MAAU;EAAAmB,OAAA,EAAVnB,MAAU,CAAAoB,IAAA;EAAAC,UAAA,EAHF;AAAM;AAuBpB,OAAO,MAAMC,SAAS,GAAkBA,CAACnB,KAAK,EAAEoB,KAAK,KAAa;EAChE,OAAOxB,MAAM,CAACC,UAAU,CAAC,CAACK,WAAW,EAAE;AACzC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}